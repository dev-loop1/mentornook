async function loadConnections(){const e=document.getElementById("incoming-requests-list"),n=document.getElementById("outgoing-requests-list"),t=document.getElementById("current-connections-list"),o=document.getElementById("loading-incoming"),c=document.getElementById("loading-outgoing"),r=document.getElementById("loading-current"),i=document.getElementById("no-incoming"),s=document.getElementById("no-outgoing"),a=document.getElementById("no-current");if(!(e&&n&&t&&o&&c&&r&&i&&s&&a))return void console.error("loadConnections: One or more required list/message elements not found on the page.");[o,c,r].forEach((e=>{e&&(e.style.display="block")})),[i,s,a].forEach((e=>{e&&(e.style.display="none")})),e.innerHTML="",n.innerHTML="",t.innerHTML="";const l=getUserInfo();if(!l)return console.error("loadConnections: User info not found. Redirecting to login."),void(window.location.href="login.html");try{const o=await WorkspaceApi("/connections/","GET",null,!0);if(o.success&&o.data){const{incoming:c=[],outgoing:r=[],current:d=[]}=o.data;renderList(e,i,c,"incoming",l.id),renderList(n,s,r,"outgoing",l.id),renderList(t,a,d,"current",l.id)}else{const c=o.error||"Failed to load connections.";console.error("loadConnections API call failed:",c);const r=`<p class="error-message">Error: ${c}</p>`;e.innerHTML=r,n.innerHTML=r,t.innerHTML=r}}catch(o){console.error("Exception during loadConnections fetch/render:",o);const c=`<p class="error-message">${o.message||"An unexpected error occurred."}</p>`;e.innerHTML=c,n.innerHTML=c,t.innerHTML=c}finally{[o,c,r].forEach((e=>{e&&(e.style.display="none")}))}}function renderList(e,n,t,o,c){e.innerHTML="",t&&t.length>0?(n&&(n.style.display="none"),t.forEach((n=>{try{if("function"!=typeof createConnectionItem)return console.error("createConnectionItem function is not defined!"),void(e.innerHTML='<p class="error-message">Error rendering list items.</p>');e.appendChild(createConnectionItem(n,o,c))}catch(e){console.error(`Error creating/appending ${o} item:`,n,e)}}))):n&&(n.style.display="block")}function createConnectionItem(e,n,t){const o=document.createElement("div");o.className="connection-item",o.dataset.connectionId=e.id;let c=null,r=null;const i=String(t),s=String(e.requester?.id),a=String(e.receiver?.id);s===i?(c=e.receiver,r=e.receiver_profile):a===i?(c=e.requester,r=e.requester_profile):(console.warn("Could not determine other user in connection item:",e),c={id:"unknown",username:"Unknown User",first_name:"",last_name:""},r={role:"",profile_picture_url:null});const l=c?.id||"unknown",d=c?.first_name&&c?.last_name?`${c.first_name} ${c.last_name}`:c?.username||"Unknown User",u=r?.role||"",m=r?.profile_picture_url||"assets/images/profile_avatar_default.png";o.dataset.userId=l;const g="current"===n?e.accepted_at:e.created_at,f=g?new Date(g).toLocaleDateString():"N/A";let p="";"incoming"!==n&&"outgoing"!==n||(p=`Sent on: ${f}`),"current"===n&&(p=`Connected since: ${f}`);let y="";switch(n){case"incoming":y='<button class="btn btn-success btn-sm accept-request" data-action="accept">Accept</button> <button class="btn btn-danger btn-sm decline-request" data-action="decline">Decline</button>';break;case"outgoing":y='<button class="btn btn-warning btn-sm cancel-request" data-action="cancel">Cancel Request</button>';break;case"current":y=`<a href="user_profile.html?id=${l}" class="btn btn-secondary btn-sm">View Profile</a> <button class="btn btn-danger btn-sm remove-connection" data-action="remove">Remove</button>`}return o.innerHTML=`\n        <img src="${m}" alt="${d}'s profile picture">\n        <div class="connection-info">\n            <strong>${d}</strong>\n            ${u?`<span class="user-role ${u}">${u}</span>`:""}\n            <span class="${"current"===n?"connection-date":"request-date"}">${p}</span>\n        </div>\n        <div class="connection-actions">\n            ${y}\n        </div>\n    `,o}async function handleConnectionListPageAction(e){const n=e.target.closest("button[data-action]");if(!n||n.disabled)return;const t=n.dataset.action,o=n.closest(".connection-item"),c=o?.dataset.connectionId,r=o?.parentElement;if(!(t&&c&&o&&r))return void console.error("Could not process action: Missing action, connectionId, item reference, or parent list.");const i=n.textContent;n.disabled=!0,n.textContent="...";const s=n.closest(".connection-actions"),a=s?s.querySelectorAll("button"):[n];a.forEach((e=>{e!==n&&(e.disabled=!0)}));try{let e="accept"===t||"decline"===t?"PUT":"DELETE",s="accept"===t||"decline"===t?{action:t}:null;const l=await WorkspaceApi(`/connections/${c}/`,e,s,!0);if(l.success||204===l.status){const e=getUserInfo();if(!e)throw new Error("Cannot update UI without logged-in user info.");if("accept"===t){o.remove(),checkIfListEmpty(r.id);const n=document.getElementById("current-connections-list");n&&l.data&&"function"==typeof createConnectionItem?(n.appendChild(createConnectionItem(l.data,"current",e.id)),checkIfListEmpty("current-connections-list")):l.data?console.error("Could not find 'current-connections-list' or 'createConnectionItem' to add accepted connection."):console.warn("Accept successful, but no updated connection data returned. 'Current' list may not be updated until next full load.")}else"decline"!==t&&"cancel"!==t&&"remove"!==t||(o.remove(),checkIfListEmpty(r.id))}else alert(`Action failed: ${l.error||"Unknown error"}`),a.forEach((e=>e.disabled=!1)),n.textContent=i}catch(e){console.error(`Error performing connection action ${t}:`,e),alert(`An error occurred: ${e.message||"Please try again."}`),a.forEach((e=>e.disabled=!1)),n.textContent=i}}function checkIfListEmpty(e){const n=document.getElementById(e),t=n?.closest(".connections-section");if(!n||!t)return void console.warn(`checkIfListEmpty: Could not find list element or parent section for ID: ${e}`);const o=t.querySelector('[id^="no-"]');if(!o)return void console.warn(`checkIfListEmpty: Could not find 'no items' message element within section for list ID: ${e}`);const c=null!==n.querySelector(".connection-item");o.style.display=c?"none":"block"}document.addEventListener("DOMContentLoaded",(()=>{if(document.querySelector(".connections-page")){loadConnections();const e=document.querySelector(".connections-page .container");e?e.dataset.listenerAttached||(e.addEventListener("click",handleConnectionListPageAction),e.dataset.listenerAttached="true"):console.error("Connections container not found for event listener setup.")}}));