"""
Django settings for mentornook_backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# mentornook_backend/settings.py
import os
from pathlib import Path
import dj_database_url
# For using .env locally:
from dotenv import load_dotenv
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = []
ALLOWED_HOSTS_ENV = os.getenv('ALLOWED_HOSTS')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS.extend(ALLOWED_HOSTS_ENV.split(','))
 # Add your frontend domain and backend domain in production


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken', # For DRF Token Authentication
    'corsheaders',

    # Your apps
    'api', # Or just 'api'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # For serving static files in production
    'corsheaders.middleware.CorsMiddleware', # CORS Middleware - place high up
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mentornook_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mentornook_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'local_db_name_placeholder', # Placeholder
        'USER': 'local_user_placeholder',     # Placeholder
        'PASSWORD': '',                       # Placeholder (empty)
        'HOST': 'localhost',                  # Placeholder
        'PORT': '5432',                       # Placeholder
    }
}

# --- Database configuration using DATABASE_URL environment variable ---
DATABASE_URL = os.getenv('DATABASE_URL') # Read the env variable

if DATABASE_URL:
#     # If the DATABASE_URL is set, parse it using dj-database-url
#     # and overwrite the default database configuration.
#     # print("INFO: Using DATABASE_URL environment variable for database configuration.") # Optional log
    DATABASES['default'] = dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=600, # Optional: Number of seconds database connections should persist
#         # ssl_require is often needed for cloud databases. Set via env var if needed.
        ssl_require=os.getenv('DB_SSL_REQUIRED', 'False') == 'True'
    )
# else:
    # Optional: Add a warning if DATABASE_URL is not set when DEBUG is False
    if not DEBUG:
         print("WARNING: DATABASE_URL environment variable not set. Using default DATABASES setting.")
    # If DATABASE_URL is not set, Django will use the default DATABASES dictionary
    # defined earlier in the file (useful for local setup without .env initially).


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Kolkata' # Adjust to your timezone
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # For production collectstatic

# Media files (User Uploads like profile pictures)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication', # Optional
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly', # Default: ReadOnly for anon, Write for auth
    ],
    'DEFAULT_FILTER_BACKENDS': [ # Optional: Add default filter backends
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
     ],
     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
     'PAGE_SIZE': 10 # Match frontend expectation or adjust frontend
}

# CORS Settings
CORS_ALLOWED_ORIGINS = []
# Load allowed origins from environment variable if set (comma-separated string expected)
# Example ENV VAR: CORS_ALLOWED_ORIGINS=https://your-frontend.netlify.app,https://another-domain.com
CORS_ALLOWED_ORIGINS_ENV = os.getenv('CORS_ALLOWED_ORIGINS')
if CORS_ALLOWED_ORIGINS_ENV:
    CORS_ALLOWED_ORIGINS.extend([origin.strip() for origin in CORS_ALLOWED_ORIGINS_ENV.split(',')])

# if DEBUG:
#     # Allow typical local development frontend origins when DEBUG is True
#     CORS_ALLOWED_ORIGINS.extend([
#         "http://localhost:5500", # VS Code Live Server
#         "http://127.0.0.1:5500",
#     ])

CORS_ALLOWED_ORIGINS = list(set(CORS_ALLOWED_ORIGINS))

# WARNING: Avoid CORS_ALLOW_ALL_ORIGINS = True in production
# Or for development ease (less secure):
# CORS_ALLOW_ALL_ORIGINS = True
CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE', 'False') == 'True'
SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'False') == 'True'
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Optional: Allow credentials (if using session auth or cookies)
# CORS_ALLOW_CREDENTIALS = True

# Ensure CSRF is handled correctly with frontend framework/setup
# For SPA, ensure CSRF cookie is HttpOnly=False if JS needs to read it
# CSRF_COOKIE_SAMESITE = 'Lax' # Or 'None' if needed with Secure=True
# SESSION_COOKIE_SAMESITE = 'Lax' # Or 'None' if needed with Secure=True
# CSRF_COOKIE_HTTPONLY = False # Allow JS to read CSRF cookie

# Optional: Redirect HTTP to HTTPS (often handled by hosting platform/proxy)
# WARNING: Only enable if your platform doesn't do this automatically AND
# SECURE_PROXY_SSL_HEADER is correctly detecting HTTPS.
# SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', 'False') == 'True'